name: 构建 LaTeX PDF

on:
  push:                         # 当推送代码时触发
    branches: [ "**" ]          # 匹配所有分支
    paths:                      # 只在这些文件变化时触发
      - "**.tex"
      - "**.bib"
      - "**.sty"
      - "**.cls"
      - "**.bst"
      - "**.png"
      - "**.jpg"
      - "**.jpeg"
      - "**.pdf"
      - ".latexmkrc"
      - ".github/workflows/latex.yml"
  pull_request:                 # 当有 PR 时触发
    branches: [ "**" ]
    paths:
      - "**.tex"
      - "**.bib"
      - "**.sty"
      - "**.cls"
      - "**.bst"
      - "**.png"
      - "**.jpg"
      - "**.jpeg"
      - "**.pdf"
      - ".latexmkrc"
      - ".github/workflows/latex.yml"
  workflow_dispatch:            # 手动触发

concurrency:                    # 防止同一分支并发运行多个任务
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read                # 仅读取代码内容

jobs:
  build-pdf:
    runs-on: ubuntu-latest      # 在最新版 Ubuntu 上运行

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      # 使用现成的 LaTeX 编译 Action（带 latexmk，支持 biber 与缓存）
      - name: 编译 LaTeX（latexmk + biber）
        uses: xu-cheng/latex-action@v3
        with:
          root_file: |          # 入口文件
            main.tex
          latexmk_use_biber: true      # 使用 biblatex 时需要 biber
          latexmk_shell_escape: true   # 若需要 minted/tikz externalize 等
          # 如果你有 .latexmkrc 并指定输出到 build/，这里无需额外设置
          # 若需强制指定引擎（如 xelatex），可添加：
          # args: -xelatex -file-line-error -interaction=nonstopmode
          extra_system_packages: >-    # 安装额外系统依赖
            fontconfig
          cache: true                  # 开启缓存，加速后续构建

      # 上传编译产物 PDF（兼容根目录和 build/ 目录）
      - name: 上传 PDF 构建产物
        uses: actions/upload-artifact@v4
        with:
          name: pdf-artifacts
          if-no-files-found: ignore
          path: |
            *.pdf
            build/*.pdf
